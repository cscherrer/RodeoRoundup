// On the command line 'print' is called 'display' :P So, create an
// alias to make it less painful to run this in the web.
var print = display;

////////////////////////////////////////////////////////////////
// The premature over engineering part: convert state to an integer
// state. I should instead only be writing these funcations at the
// point that we need them ...

var coordsToIntCoords = function(xy) {
  return { x: Math.floor(xy.x),
           y: Math.floor(xy.y)
         };
};

// Make all the coords in a state integers, in case we allow floating point.
var stateToIntState = function(state) {
  return { bulls: map(coordsToIntCoords, state.bulls),
           coybows: map(coordsToIntCoords, state.cowboys),
           map: state[map]
         };
};

var removeElement = function(xs, i) {
  return xs.slice(0, i).concat(xs.slice(i+1));
}


var getXy = function(r) { return r.xy };

var sim2world = function(simState) {
  return {
    bulls: map(getXy, simState.bulls),
    cowboys: map(getXy, simState.cowboys),
    map: simState.map
  }
}

////////////////////////////////////////////////////////////////
// State transitions.
////////////////////////////////////////////////////////////////
//
// A transition function (for a bull or cowboy) gets the agent's
// current position, the world state -- including the position and
// type of all other agents and the arena dimenions -- and internal
// state specific to the agent. The output is a new position and
// internal state:
//
//     (position, internalState, worldState) -> {xy: newPosition, internalState: newInternalState}
//
// Note: the world state here doesn't include the bull or cowboy entry
// for the current agent, i.e. the agent in the position specified by
// the first argument.
//
// For the map, I'm assuming the *upper left* corner is '{x:0,y:0}',
// that 'x' is horizontal, and that 'y' is vertical.
//
// For xy coords, we use
//
//     xy = { x: <number>, y: <number> }
//
// An agent's state is represented by
//
//     agentState = {
//       xy: <xy coords>,
//       transition: <transition function>,
//       internalState: <agent-specific state>
//     }
//
// and we compute a new agent state with
//
//     newAgentState = agentState.transition(agentState.xy, agentState.internalState, worldState)
//
// The world state is
//
//     worldState = {
//       bulls: [<bull xy>],
//       cowboys: [<cowboy xy>],
//       map: {rows: <num rows>, cols: <num cols>}
//     }
//
// Finally, the main loop will have a simulation state, which is like
// the world state, e.g. tracks agent states instead of simple
// coordinates. We make this a different type from the world state,
// because we may have to keep changing it as things evolve. The
// simulation state is
//
//     simState = {
//       bulls: [<agent state for bull>],
//       cowboys: [<agent state for cowboy>],
//       map: {rows: <num rows>, cols: <num cols>}
//     }
//
// From this simulation state, we can compute a world state, which we
// pass to the individual transition functions to compute new agent
// states.

////////////////////////////////////////////////////////////////
// Main simulation loop.



var getCowboy = function(n, simState, worldState) {
  var myAgent = simState.cowboys[n]
  var myWorld = {
      bulls: worldState.bulls
    , cowboys: removeElement(worldState.cowboys, n)
    , map: worldState.map
    }
  }
}

// Run the simulation for one step, by running all agent transition
// functions to compute new agent states.
var stepSimulation = function(simState) {
  // print(simState);
  // print(simState.bulls);
  // print("length: " + simState.bulls.length);
  // print("simulate 1");
  // 
  // print("getXy: " + getXy(simState.bulls[0]).x);
  // print("simulate 2");
  var worldState = sim2world(simState);
  // print("simulate 3");
  // NOTE!!! The plain 'print(worldState)' prints a useful
  // representation, but the 'print("worldState: " + worldState)' does
  // not! I have no idea how the string conversion works, but the
  // distinction is useful for debugging.
  // print("worldState: " + worldState);
  // print(worldState);
  // print("slice: ");
  // print([1,2,3,4].slice(1,2));
  // print([1,2,3].slice(3));
  var newBulls = mapIndexed(function(n, agentState) {
    var worldStateWithoutCurrentBull = {
      bulls: worldState.bulls.slice(0, n).concat(worldState.bulls.slice(n+1)),
      cowboys: worldState.cowboys,
      map: worldState.map
    }
    // print("worldStateWithoutCurrentBull");
    // print(worldStateWithoutCurrentBull);
    // print("agentState");
    // print(agentState);
    var update = agentState.transition(agentState.xy, agentState.internalState, worldStateWithoutCurrentBull);
    // print("update");
    // print(update);
    return {
      xy: update.xy,
      internalState: update.internalState,
      transition: agentState.transition
    };
  }, simState.bulls);
  // XXX: note that newBulls have a bunch of undefined below! There is
  // a bug nearby ...
  // print("newBulls: ");
  // print(newBulls);
  var newCowboys = mapIndexed(function(n, agentState) {
    var worldStateWithoutCurrentCowboy = {
      bulls: worldState.bulls,
      cowboys: worldState.cowboys.slice(0, n).concat(worldState.cowboys.slice(n+1)),
      map: worldState.map
    }
    var update = agentState.transition(agentState.xy, agentState.internalState, worldStateWithoutCurrentCowboy);
    return {
      xy: update.xy,
      internalState: update.internalState,
      transition: agentState.transition
    };
  }, simState.bulls);
  return {
    bulls: newBulls,
    cowboys: newCowboys,
    map: simState.map
  };
}

var runSimulation = function(simState, numSteps) {
  if (numSteps == 0) {
    return [simState];
  } else {
    return [simState].concat(runSimulation(stepSimulation(simState), numSteps - 1));
  };
};

////////////////////////////////////////////////////////////////
// Perimeter.

var topWall = function(map) {
  return 0;
};

var bottomWall = function(map) {
  return map.rows - 1;
};

var leftWall = function(map) {
  return 0;
};

var rightWall = function(map) {
  return map.cols - 1;
};

var isOnPerimeter = function(here, map) {
  return
    here.x == leftWall(map) ||
    here.y == topWall(map) ||
    here.x == rightWall(map) ||
    here.y == bottomWall(map);
};

////////////////////////////////////////////////////////////////
// Moves.

var goUp = function(here) {
  return {x: here.x, y: here.y - 1};
}

var goDown = function(here) {
  return {x: here.x, y: here.y + 1};
}

var goLeft = function(here) {
  return {x: here.x - 1, y: here.y};
}

var goRight = function(here) {
  return {x: here.x + 1, y: here.y};
}

////////////////////////////////////////////////////////////////

// Transition function that does nothing. A random transition function
// would be a nice test case too.
var idTransition = function(xy, internalState, worldState) {
  return {xy: xy, internalState: internalState};
};

// Transition function for an agent that runs to the perimeter and
// then goes in circles.
//
// If the agent is already on the perimeter, then it continues in the
// clockwise direction.
//
// If the agent is not already on the perimeter, then it steps towards
// the closest point on the perimeter.
var circleThePerimeterTransition = function(here, internalState, worldState) {
  print("circleThePerimeterTransition");
  var map = worldState.map;
  print("???");
  var mkNewPosition = function() {
    print("do closures work?");
    print(map);
    if (isOnPerimeter(here, map)) {
      if (here.x == leftWall(map) && here.y != topWall(map)) {
        // Left wall.
        return goUp(here);
      } else if (here.y == topWall(map) && here.x != rightWall(map)) {
        // Top wall.
        return goRight(here);
      } else if (here.x == rightWall(map) && here.y != bottomWall(map)) {
        // Right wall.
        return goDown(here);
      } else if (here.y == bottomWall(map) && here.x != leftWall(map)) {
        // Bottom wall.
        return goLeft(here);
      } else {
        // I asked how to raise an exception in WebPPL and I was told
        // the easiest thing to do is cause a runtime error; literal
        // 'throw' is not supported.
        dieDieDie("The map is 1x1, or we have a bug!");
      }
    } else {
      // Not on the perimeter yet.
      var weightedMoves = [
        {delta: here.x - leftWall(map),   move: goLeft},
        {delta: here.x - rightWall(map),  move: goRight},
        {delta: here.y - topWall(map),    move: goUp},
        {delta: here.y - bottomWall(map), move: goDown}]
      var getWeight = function(wm) {
        return Math.abs(wm.delta);
      }
      return sortOn(weightedMoves, getWeight).move(here);
    }
  };
  return {xy: mkNewPosition(), internalState: internalState }
};

////////////////////////////////////////////////////////////////
// Rendering.
////////////////////////////////////////////////////////////////

// Example of rendering in the shell with screen clearing between frames:
/*
for i in `seq 1 999`; do echo -n '\033[2J'; echo $((i/100)); echo $(((i / 10) % 10)); echo $((i % 10)); sleep 0.01; done;
*/
// More on magic terminal-clearing-escape-sequences here:
// http://stackoverflow.com/questions/9006988/node-js-on-windows-how-to-clear-console.

// Test if two coords are in the same square.
var areCollided = function(here1, here2) {
  return here1.x === here2.x && here1.y === here2.y;
}

// PRIMITIVES
// Let's put some primitives here. We'll start with a placeholder for each, and fill in as we go.
// 
// 
var bullDirection = function(here, state) {
  return 0;
};

var cowboyDirection = function(here,state) {
 return 0
}

// Cowboy AI
// Cowboy movement is initialized by sampling a random direction; this is weighted according to bull direction, etc
// 
var cowboyTransition = function(here,state) {
  var move = uniformDraw(goUp, goDown, goLeft, goRight)
  return move(here)
}

var transition = function(here, state, action) {
  
}

var actions = [goUp, goDown, goLeft, goRight];

// Maximum utility agent, adapted from Andreas's code
var maxEUAgent = function(,state,utility) {
  var expectedUtility = function(action) {
    return expectation(Infer({ method: 'enumerate' }, function() {
      return utility(transition(here, state, action));
    }));
  };
  return argMax(expectedUtility, actions);
};

// Produce an ASCII rendering of the world state.
var render = function(worldState) {
  var rows = worldState.map.rows;
  var cols = worldState.map.cols;
  var bulls = worldState.bulls;
  var cowboys = worldState.cowboys;
  var agentGrid = mapN(function (r) {
    return mapN(function (c) {
      var here = {x:r,y:c};
      var foundABull   = any(function(them) { return areCollided(them, here) }, bulls);
      var foundACowboy = any(function(them) { return areCollided(them, here) }, cowboys);
      if (foundABull && foundACowboy) {
        return "$$";
      } else if (foundABull) {
        return "BB";
      } else if (foundACowboy) {
        return "cc";
      } else {
        return "  ";
      }
    }, cols)
  }, rows);
  var horizontalFence = ['+'].concat(repeat(cols, function() {'--'})).concat(['+']);
  var withVerticalFences = map(function(row) {['|'].concat(row).concat(['|'])}, agentGrid);
  var withFences = [horizontalFence].concat(withVerticalFences).concat([horizontalFence]);
  var withNewLines = map(function(row) { return row.concat('\n') }, withFences);

  var collapse = function(xss) { return reduce(function(a,b) { return a.concat(b) }, [], xss) };
  return collapse(collapse(withNewLines));
};

var cowboyUtility = function(x,y,state) {
  return average(map(distToEntity.bind(cowboyPos, state.bulls))) 
}

var distToEntity = function(bullPos, cowboyPos) {Math.sqrt(Math.pow((bullPos.x - cowboyPos.x), 2) + Math.pow((bullPos.y - cowboyPos.y), 2))};

var bullUtility = function(x, y, state) {
  // distance toCowboys

  var bullPos = {x : x, y : y}

  var averageDistanceFromBullToCowboy = average(map(distToEntity.bind(bullPos), state.cowboys))
  return averageDistanceFromBullToCowboy
  // Might want to look at other stats like min dist to cowboy
}

////////////////////////////////////////////////////////////////
// Examples.

var worldState1 = {
  bulls: [{x:0,y:0}],
  cowboys: [{x:0,y:0}, {x:1,y:1}],
  map: {rows: 4, cols: 4}
};

var worldState2 = {
  bulls: [{x:11,y:10}, {x:3,y:7}],
  cowboys: [{x:5,y:5}, {x:15,y:15}],
  map: {rows: 20, cols: 20}
};

//print(isOnPerimeter(worldState1.cowboys[1], worldState1.map));

var withTransition = function(t) {
  var fn = function(xy) {
    return { xy: xy
           , internalState: {}
           , transition: t
           }
  }
  return fn
}

var makeDummy = withTransition(circleThePerimeterTransition)

// XXX: run main simulation loop and print results. Want to insert
// delays between printing the map, and insert the console clear
// character after each print; see example shell code above.

var simState2 = {
    bulls: map(makeDummy, worldState2.bulls)
  , cowboys: map(withTransition(idTransition), worldState2.cowboys)
  , map: worldState2.map
}

//print(runSimulation(simState2, 10));


print(simState2)
stepSimulation(simState2)